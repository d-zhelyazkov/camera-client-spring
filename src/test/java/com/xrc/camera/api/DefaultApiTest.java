/*
 * Camera API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0-oas3
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.xrc.camera.api;

import com.xrc.camera.model.AECompensationInfo;
import com.xrc.camera.model.AECompensationValue;
import com.xrc.camera.model.AELockInfo;
import com.xrc.camera.model.AELockValue;
import com.xrc.camera.model.BaseSettingInfo;
import com.xrc.camera.model.FocusMode;
import com.xrc.camera.model.FocusModeInfo;
import com.xrc.camera.model.FocusModeValue;
import com.xrc.camera.model.ISOInfo;
import com.xrc.camera.model.ISOValue;
import com.xrc.camera.model.Setting;
import com.xrc.camera.model.SettingInfo;
import com.xrc.camera.model.SettingValue;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.client.HttpClientErrorException;

import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Date;
import java.util.List;

import static com.xrc.camera.api.Constants.IMAGE_FILE_DATE_FORMAT;


/**
 * API tests for DefaultApi
 */
@SpringBootTest
@RunWith(SpringRunner.class)
public class DefaultApiTest {

    @Autowired
    private DefaultApi api;

    @Test
    public void imageGetTest() throws IOException {
        byte[] image = api.imageGet();
        System.out.println(String.format("Image size: %dB", image.length));
        Files.write(
                Paths.get(IMAGE_FILE_DATE_FORMAT.format(new Date()) + ".jpg"),
                image);

        Assert.assertNotNull(image);
        Assert.assertTrue(image.length > 0);
    }

    @Test
    public void settingsAECOMPENSATIONGetTest() {
        AECompensationInfo response = api.settingsAECOMPENSATIONGet();

        validateSettingInfo(Setting.AE_COMPENSATION, response);
        Assert.assertTrue(response.getValues().contains(response.getValue()));
    }

    @Test
    public void settingsAECOMPENSATIONPutTest() {
        AECompensationInfo aeCompensationInfo = api.settingsAECOMPENSATIONGet();
        List<BigDecimal> values = aeCompensationInfo.getValues();
        BigDecimal newValue = values.get(0);

        AECompensationValue body = new AECompensationValue()
                .value(newValue);
        api.settingsAECOMPENSATIONPut(body);

        aeCompensationInfo = api.settingsAECOMPENSATIONGet();
        Assert.assertEquals(newValue, aeCompensationInfo.getValue());
    }

    @Test
    public void settingsAELOCKGetTest() {
        AELockInfo response = api.settingsAELOCKGet();

        validateSettingInfo(Setting.AE_LOCK, response);
        validateSettingValue(response);
    }

    @Test
    public void settingsAELOCKPutTest() {
        AELockInfo aeLockInfo = api.settingsAELOCKGet();
        boolean newValue = aeLockInfo.getValues().get(0);
        AELockValue body = new AELockValue()
                .value(newValue);

        api.settingsAELOCKPut(body);

        aeLockInfo = api.settingsAELOCKGet();
        Assert.assertEquals(newValue, aeLockInfo.getValue());
    }

    @Test
    public void settingsFOCUSMODEGetTest() {
        FocusModeInfo response = api.settingsFOCUSMODEGet();

        validateSettingInfo(Setting.FOCUS_MODE, response);
        validateSettingValue(response);
    }

    @Test
    public void settingsFOCUSMODEPutTest() {
        FocusModeInfo focusModeInfo = api.settingsFOCUSMODEGet();
        List<FocusMode> values = focusModeInfo.getValues();
        FocusMode newValue = (values.contains(FocusMode.CONTINUOUS)) ? FocusMode.CONTINUOUS : values.get(0);
        FocusModeValue body = new FocusModeValue()
                .value(newValue);
        api.settingsFOCUSMODEPut(body);

        focusModeInfo = api.settingsFOCUSMODEGet();
        Assert.assertEquals(newValue, focusModeInfo.getValue());
    }

    @Test
    public void settingsGetTest() {
        List<Setting> settings = api.settingsGet();
        System.out.println(settings);

        Assert.assertNotNull(settings);
        Assert.assertTrue(settings.size() > 0);
    }

    @Test
    public void settingsISOGetTest() {
        ISOInfo response = api.settingsISOGet();

        validateSettingInfo(Setting.ISO, response);

        Integer value = response.getValue();
        List<Integer> values = response.getValues();
        Assert.assertTrue(values.get(0) <= value && value <= values.get(values.size() - 1));

    }

    @Test(expected = HttpClientErrorException.BadRequest.class)
    public void settingsISOPutTest() {
        ISOInfo isoInfo = api.settingsISOGet();
        int newValue = isoInfo.getValues().get(0);
        ISOValue body = new ISOValue()
                .value(newValue);
        api.settingsISOPut(body);
    }

    @Test
    public void settingsSettingGetTest() {

        Setting setting = Setting.FOCUS_MODE;
        SettingInfo settingInfo = api.settingsSettingGet(setting);
        validateSettingInfo(setting, settingInfo);
        Assert.assertTrue(settingInfo.getValues().contains(settingInfo.getValue()));
        validateSettingValue(settingInfo);
    }

    @Test
    public void settingsSettingPutTest() {
        Setting setting = Setting.FOCUS_MODE;
        SettingInfo settingInfo = api.settingsSettingGet(setting);
        String newValue = settingInfo.getValues().get(0);
        SettingValue body = new SettingValue()
                .value(newValue);
        api.settingsSettingPut(body, setting);

        settingInfo = api.settingsSettingGet(setting);
        Assert.assertEquals(newValue, settingInfo.getValue());
    }

    private void validateSettingInfo(Setting setting, BaseSettingInfo settingInfo) {
        System.out.println(settingInfo);

        Assert.assertNotNull(settingInfo);
        Assert.assertEquals(setting, settingInfo.getSetting());

        List values = settingInfo.getValues();
        Assert.assertFalse(values.isEmpty());
        Assert.assertFalse(values.contains(null));
    }

    private void validateSettingValue(BaseSettingInfo<?> settingInfo) {
        List<?> values = settingInfo.getValues();
        Assert.assertTrue(values.contains(settingInfo.getValue()));
    }

}


